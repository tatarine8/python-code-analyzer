let sortAscending = true;  // true = ‚Üë, false = ‚Üì
let originalOrder = [];    // –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener("DOMContentLoaded", () => {
    const accordion = document.getElementById("functionsAccordion");
    if (!accordion) return;

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ–∫
    originalOrder = Array.from(accordion.children);

    // –Ø–∫—â–æ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞–ø—Ä—è–º—É –∑ #functions, –∞–∫—Ç–∏–≤—É—î–º–æ –≤–∫–ª–∞–¥–∫—É
    if (window.location.hash === '#functions') {
        const tab = new bootstrap.Tab(document.querySelector('a[href="#functions"]'));
        tab.show();
    }

    // –ü–æ—á–∞—Ç–∫–æ–≤–æ —Ö–æ–≤–∞—î–º–æ —Ñ–∞–π–ª–∏ –±–µ–∑ —Ñ—É–Ω–∫—Ü—ñ–π
    const hidden = document.querySelectorAll('.no-functions');
    hidden.forEach(el => el.style.display = 'none');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
    const toggleBtn = document.getElementById("toggleNoFunctions");
    if (toggleBtn) {
        toggleBtn.textContent = "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ —Ñ–∞–π–ª–∏";
    }

    const expandBtn = document.getElementById("toggleAllFunctions");
    if (expandBtn) {
        expandBtn.textContent = "–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ";
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    document.getElementById("sortSelector").value = "default";
    updateSortDirectionIcon();
});

// üîÅ –ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏ –±–µ–∑ —Ñ—É–Ω–∫—Ü—ñ–π
function toggleNoFunctions() {
    const cards = document.querySelectorAll('.no-functions');
    const btn = document.getElementById("toggleNoFunctions");

    cards.forEach(card => {
        card.style.display = (card.style.display === "none") ? "block" : "none";
    });

    if (btn) {
        const shown = cards.length > 0 && cards[0].style.display === 'block';
        btn.textContent = shown ? "–°—Ö–æ–≤–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ —Ñ–∞–π–ª–∏" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ —Ñ–∞–π–ª–∏";
    }
}

// üîÅ –ü–µ—Ä–µ–º–∏–∫–∞—á –Ω–∞–ø—Ä—è–º–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
function toggleSortDirection() {
    sortAscending = !sortAscending;
    updateSortDirectionIcon();
    sortFiles();  // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–æ—Ä—Ç—É—î–º–æ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É
}

// üîÅ –û–Ω–æ–≤–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É –Ω–∞–ø—Ä—è–º–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (‚Üë –∞–±–æ ‚Üì)
function updateSortDirectionIcon() {
    const btn = document.getElementById("sortDirection");
    if (btn) {
        btn.textContent = sortAscending ? "‚Üë" : "‚Üì";
        btn.title = sortAscending ? "–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º" : "–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º";
    }
}

// üîÉ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
function sortFiles() {
    const sortOption = document.getElementById("sortSelector").value;
    const accordion = document.getElementById("functionsAccordion");
    if (!accordion) return;

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
    if (sortOption === "default") {
        originalOrder.forEach(card => accordion.appendChild(card));
        return;
    }

    const cards = Array.from(accordion.children);

    // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    const getFuncCount = (card) => {
        const text = card.querySelector('.card-header h5 small')?.textContent || '';
        const match = text.match(/\d+/);
        return match ? parseInt(match[0], 10) : 0;
    };

    const getMaxComplexity = (card) => {
        const rows = card.querySelectorAll('tbody tr');
        const values = Array.from(rows).map(tr => {
            const cell = tr.children[1];
            return cell ? parseFloat(cell.textContent) || 0 : 0;
        });
        return values.length ? Math.max(...values) : 0;
    };

    // –õ–æ–≥—ñ–∫–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    cards.sort((a, b) => {
        let valA = 0, valB = 0;

        if (sortOption === "name") {
            valA = a.querySelector('.card-header h5 strong')?.textContent?.toLowerCase() || '';
            valB = b.querySelector('.card-header h5 strong')?.textContent?.toLowerCase() || '';
        } else if (sortOption === "function_count") {
            valA = getFuncCount(a);
            valB = getFuncCount(b);
        } else if (sortOption === "complexity") {
            valA = getMaxComplexity(a);
            valB = getMaxComplexity(b);
        }

        if (valA < valB) return sortAscending ? -1 : 1;
        if (valA > valB) return sortAscending ? 1 : -1;
        return 0;
    });

    // –î–æ–¥–∞—Ç–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–æ DOM
    cards.forEach(card => accordion.appendChild(card));
}

// üîÅ –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏/–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π
let allExpanded = false;

function toggleAllFunctions() {
    const accordions = document.querySelectorAll('#functionsAccordion .accordion-collapse');
    accordions.forEach(collapse => {
        const bsCollapse = new bootstrap.Collapse(collapse, { toggle: false });
        allExpanded ? bsCollapse.hide() : bsCollapse.show();
    });

    allExpanded = !allExpanded;

    const btn = document.getElementById("toggleAllFunctions");
    if (btn) {
        btn.textContent = allExpanded ? "–ó–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ" : "–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ";
    }
}
